// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221227200028_FixCompanyCountryForeignKey")]
    partial class FixCompanyCountryForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("BrandId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("DataAccess.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("region");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sub_category");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name");

                    b.HasIndex("Region");

                    b.HasIndex("SubCategory");

                    b.ToTable("category");
                });

            modelBuilder.Entity("DataAccess.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("CountryId")
                        .HasColumnType("varchar(2)")
                        .HasColumnName("country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.HasKey("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name");

                    b.ToTable("company");
                });

            modelBuilder.Entity("DataAccess.Models.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name");

                    b.ToTable("country");
                });

            modelBuilder.Entity("DataAccess.Models.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int>("InfinityBottleId")
                        .HasColumnType("integer")
                        .HasColumnName("infinity_bottle_id");

                    b.Property<int>("WhiskyId")
                        .HasColumnType("integer")
                        .HasColumnName("whisky_id");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.ToTable("history");
                });

            modelBuilder.Entity("DataAccess.Models.InfinityBottle", b =>
                {
                    b.Property<int>("InfinityBottleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InfinityBottleId"));

                    b.Property<string>("BottleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bottle_name");

                    b.Property<int>("BottleSize")
                        .HasColumnType("integer")
                        .HasColumnName("bottle_size");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("NumberOfBottles")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_bottles");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("InfinityBottleId");

                    b.HasIndex("BottleName");

                    b.ToTable("infinity_bottle");
                });

            modelBuilder.Entity("DataAccess.Models.Whisky", b =>
                {
                    b.Property<int>("WhiskyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WhiskyId"));

                    b.Property<int>("ABV")
                        .HasColumnType("integer")
                        .HasColumnName("abv");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("WhiskyId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name");

                    b.ToTable("whiskies");
                });

            modelBuilder.Entity("DataAccess.Models.Brand", b =>
                {
                    b.HasOne("DataAccess.Models.Company", null)
                        .WithMany("Brands")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Company", b =>
                {
                    b.HasOne("DataAccess.Models.Country", null)
                        .WithMany("Companies")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("DataAccess.Models.Whisky", b =>
                {
                    b.HasOne("DataAccess.Models.Brand", null)
                        .WithMany("Whiskies")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Category", null)
                        .WithMany("Whiskies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Brand", b =>
                {
                    b.Navigation("Whiskies");
                });

            modelBuilder.Entity("DataAccess.Models.Category", b =>
                {
                    b.Navigation("Whiskies");
                });

            modelBuilder.Entity("DataAccess.Models.Company", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("DataAccess.Models.Country", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
